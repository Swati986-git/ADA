#include <bits/stdc++.h>
using namespace std;
struct Edge {
    int u, v, weight;
    bool operator<(Edge const& other) {
        return weight < other.weight;
    }
};
struct DSU {
    vector<int> parent, rank;
    DSU(int n) {
        parent.resize(n);
        rank.resize(n, 0);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }

    int find(int x) {
        if (x != parent[x]) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }

    void unite(int a, int b) {
        a = find(a);
        b = find(b);
        if (a != b) {
            if (rank[a] < rank[b]) {
                swap(a, b);
            }
            parent[b] = a;
            if (rank[a] == rank[b]) {
                rank[a]++;
            }
        }
    }
};
int kruskal(int n, vector<Edge>& edges) {
    sort(edges.begin(), edges.end());
    DSU dsu(n);
    int totalWeight = 0;

    for (Edge& e : edges) {
        if (dsu.find(e.u) != dsu.find(e.v)) {
            dsu.unite(e.u, e.v);
            totalWeight += e.weight;
            cout << "Edge included: " << e.u << " - " << e.v << " (Weight: " << e.weight << ")\n";
        }
    }
    return totalWeight;
}

int main() {
    int n = 4;
    vector<Edge> edges = {
        {0, 1, 1}, {1, 2, 4}, {0, 2, 3}, {2, 3, 2}, {1, 3, 5}
    };
    cout << "Minimum Spanning Tree Weight: " << kruskal(n, edges) << "\n";
    return 0;
}
